<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[All your writing are belong to us]]></title>
  <link href="http://www.cosminn.net/atom.xml" rel="self"/>
  <link href="http://www.cosminn.net/"/>
  <updated>2014-07-13T18:20:19-07:00</updated>
  <id>http://www.cosminn.net/</id>
  <author>
    <name><![CDATA[Cosmin Nicolaescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Week of Stripes]]></title>
    <link href="http://www.cosminn.net/blog/2014/07/13/a-week-of-stripes/"/>
    <updated>2014-07-13T15:57:15-07:00</updated>
    <id>http://www.cosminn.net/blog/2014/07/13/a-week-of-stripes</id>
    <content type="html"><![CDATA[<p>This week was my first week at <a href="https://www.stripe.com">Stripe</a>, and so far it&rsquo;s been a thrilling
experience, even though my mind is still coping with the overload of
information it&rsquo;s been subjected to. The people have been extremely friendly and
welcoming. The office is both great and in a great location. The food is tasty
and the beer selection is spectacular.</p>

<p>I wanted to outline some of the details of my on-boarding process, and compare
it to my previous on-boarding at Microsoft. Also, as someone who&rsquo;s been using
various enterprise technologies from Microsoft, I was very curious to see what
the equivalents are in a small company, so this post will outline many of them.</p>

<!-- more -->


<h3>Pre-start</h3>

<p>Upon accepting my offer, I was sent a welcome email in which all of the company
was CC&#8217;ed. While a very small thing, receiving tens of welcome emails from
people in the company makes you feel happy about your choice.</p>

<p>Next up, a few weeks before starting (assuming there is such a period) you get
another email in which you get to choose your email address and office setup,
including your laptop (with whatever customizations you&rsquo;d like!).  This means
that on your first day you&rsquo;ve got your ideal environment available.  I think
this is valuable not only from a productivity perspective, but also morale. At
least for us engineers, not having the hardware you want can be annoying at the
very least.</p>

<p>This is one of the first contrasting aspects from Microsoft. When you join
Microsoft, you also have your computer available, but it&rsquo;s not one that you
chose or customized. I can see why having a custom computer for each of the
130,000 employees can have massive operational overhead, but I also believe
Microsoft is moving too much in the &ldquo;one way&rdquo; side by institutionalizing the
same hardware regardless of job or discipline. An engineer has very different
needs from someone in sales. Even within engineering, someone focusing on
client development has different needs from someone building web services.
Empower your people to make the right choices for themselves and they&rsquo;ll be
better, more productive employees.</p>

<p>Another difference worth mentioning is what&rsquo;s on the machine. At Stripe, my
laptop had my account already created, my SSH keys configured, the VPN set up
and the major repositories available. At Microsoft the first thing I did was
re-image the box with the IT image, followed by endless hours of setting up the
team-specific software (after figuring out all the permissions &mdash; more on that
below).</p>

<h3>First day</h3>

<p>Upon going through an office tour and meeting some people, your assigned
spin-up buddy (another employee who helps you out while you&rsquo;re ramping up) goes
over some of the common tools used inside the company. After lunch, you get
your development environment set up by publishing your <a href="https://www.stripe.com/about#cos">photo</a> on the Stripe
public website. While a rather trivial process, it acts as a forcing function
to get your repositories up-to-date, begin familiarizing yourself with the
structure of the code, and push a change through the pipeline just like you
would anything else moving forward. I can&rsquo;t emphasize enough how <strong>huge</strong> this
is! I don&rsquo;t remember exactly when my first check-in went through at Microsoft
after starting, but I&rsquo;m 92% sure it wasn&rsquo;t in my first week.</p>

<p>This is where some of the agility and modern tools start being noticed. Going
through that exercise was possible because I had <em>access</em> to everything. For
the things that weren&rsquo;t already set up for me, my spin-up buddy would give me
access, which was instantaneous. One of the biggest complaints I heard from
Microsoft new hires was that, after figuring out what permissions you need,
there&rsquo;s a 1-3 day waiting period for replication to take place. This
practically means that for your first few days, you really can&rsquo;t be very
productive, no matter how much you try.</p>

<h3>Tools</h3>

<p>Most of the things above covered process, but more fascinating for me were the
tools used. Before joining, I was rather confident that Microsoft has done a
good job at building enterprise products, and the fact that so many companies
use them is a testament to their success. Moreover, it seemed nearly impossible
for Microsoft to lose its leader position. After this week, I&rsquo;m less convinced
 of the latter.</p>

<h4>Email &amp;&amp; Calendar</h4>

<p>At Stripe we use Google Apps, which means every employee gets their email,
calendar and <strong>directory</strong> through Google. You want to schedule a meeting, no
problem; there&rsquo;s even support for rooms, and of course it includes free/busy
information. All the mailing lists come through Google Apps as well, and
there&rsquo;s a nice page where you can see all of them and subscribe to the ones you
need. Granted, this works because we&rsquo;re a small company and don&rsquo;t have tens of
thousands of mailing lists, but there&rsquo;s nothing preventing that from happening.
More importantly, access is <em>immediate</em>. There are no replication delays, or
approvals. Filters are trivial to create.</p>

<p>But what I was <em>most</em> happy about is that they&rsquo;ve solved the &ldquo;nested lists&rdquo;
problem. I can&rsquo;t recall how many times I got an email at Microsoft because I
was a member of some group that eventually got nested through many layers to
some other group, but I had no clue what that initial list was. GMail actually
tells you for every email which mailing list resulted in you getting an email.
It even does that if the list is BCC&#8217;ed! Why Exchange hasn&rsquo;t implemented this
after all these years is beyond me.</p>

<h4>Notes</h4>

<p>OneNote is one of my favorite products from Microsoft. It was available on
multiple platforms when the rest of Office was not, and it makes note-taking
orders of magnitude better. At Microsoft I would say that information is
communicated in one of three formats: email (60%), websites (20%) and OneNote
(20%). It wasn&rsquo;t until a few years back that <em>some</em> people started keeping
meeting notes in OneNote. But the problem is that there are <em>many</em> OneNotes.
Each feature team typically has their own, and they&rsquo;re typically not stored in
a place that&rsquo;s easy to find.</p>

<p>Stripe uses <a href="https://hackpad.com/">Hackpad</a>, which while not as feature-rich as OneNote, does
one thing really well: it keeps <em>all</em> notes from <em>any</em> employee in <strong>one</strong>
place. Through Hackpad I&rsquo;ve been able to read how-tos and wikis, as well as
notes sent by the co-founders or other people to the company and have
historical value.</p>

<h4>Chat</h4>

<p>Basic Instant Messaging isn&rsquo;t a new problem, and it&rsquo;s been mainly solved since
the late 90s. In addition to IM, Microsoft Lync also had desktop sharing which
was very useful, and conferencing was relatively seamless. There were two
problems I had with Lync: it was primarily focused on one-to-one interactions.
Yes, you could have group chats, but that was a small minority of how people
spent their time on Lync. Second, and more importantly, it was pretty ephemeral.
Conversation history was available for the participants but, that was about it.
Microsoft never embraced an IRC-like communication channel, and I think there&rsquo;s
some very practical cases for that.</p>

<p>Stripe uses <a href="https://slack.com/">Slack</a> and they&rsquo;ve solved all three problems: they enable
direct messaging within an organization. They have channels which people can
subscribe to and discuss various topics. And everything said there is persisted
and searchable.</p>

<h4>Source Control</h4>

<p>GitHub. &lsquo;nuff said.</p>

<p>It&rsquo;s not necessarily <em>where</em> you host your code that makes a huge difference
(although I personally think it&rsquo;s pretty hard to beat GitHub). But having a
modern, distributed source control technology is invaluable. At Microsoft we
spent endless hours debating between Source Depot (an internal technology) and
Team Foundation Service (Microsoft&rsquo;s source control product launched a few
years back). Both were losing choices. Yes, they each had some advantages and
disadvantages, but they were <em>relative to each other</em>. When compared to Git or
Mercurial, there were zero advantages.</p>

<p>Luckily Microsoft is moving in the right direction: TFS has added support for
Git, and teams are starting to move to that, but adoption will take some time
when you&rsquo;re dealing with so many teams and large codebase(s).</p>

<p>A few notes on source control-related topics: code reviews are primarily done
via pull requests. Checkins aren&rsquo;t gated since people use feature branches for
almost any change, and there is a continuous integration system in place via
<a href="https://www.solanolabs.com/">Tddium</a> which will run all tests with any commit. This is somewhat similar
to SNAP or TFS gating, however it has the advantage of being much more scalable
since it can test things in parallel and not become a bottleneck.</p>

<h4>Logging in</h4>

<p>Everything inside Microsoft relied on Active Directory. Any website or tool
used those credentials for authentication and authorization. One you logged in,
you generally never had to type your password ever again. This was by far the
aspect I was most curious about.</p>

<p>My laptop has a local account, and SSH keys are used to authenticate whenever
connecting to another server. So far, I think this is a better experience than
Microsoft&rsquo;s because I don&rsquo;t have to worry about credentials in different
environments, and instead everything is managed through my public key.</p>

<p>Many of the tools have support for Google Account, and in those cases you go
through a simple OAuth flow initially, after which you never have to log in
again. There are, however, some tools that have their own authentication, and
for those you end up creating new accounts.</p>

<p>So overall, it&rsquo;s not 100% centralized, but through OAuth flows it&rsquo;s nearly there.</p>

<h3>Closing thoughts</h3>

<p>I realized as I was writing this post that the tone can be construed as
somewhat negative towards Microsoft. It&rsquo;s really not meant to be, but I do have
to admit I was surprised at how well a non-Microsoft stack can function
inside a company, even in areas where I believed Microsoft was the standard.
Many of these benefits are due to the use of much more modern tools. There&rsquo;s
typically no software to install and everything is available via a web
interface. The data is all stored in the cloud. The products were built
with scale in mind: there are no delays, and replication is something internal
rather than visible to customers.</p>

<p>These are all contributing factors, and mostly valid ones. But at the end of
the day, employee productivity is what matters the most. If a particular
process or tool doesn&rsquo;t maximize productivity, fix it or replace it. Change
inside Microsoft is underway. It&rsquo;s just a matter of how long it will take until
it reaches the whole company. The sad part is that its competitors not only
aren&rsquo;t spending efforts migrating and re-educating, but that they&rsquo;ve been
living in that &ldquo;modern world&rdquo; for a few years.</p>

<p>Now time to get back to learning some new stuff&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resume (as in Continue)]]></title>
    <link href="http://www.cosminn.net/blog/2014/07/07/resume-as-in-continue/"/>
    <updated>2014-07-07T15:01:01-07:00</updated>
    <id>http://www.cosminn.net/blog/2014/07/07/resume-as-in-continue</id>
    <content type="html"><![CDATA[<p>Back in high school and college I used to write. Sometimes quite a lot.
Sometimes only for myself and sometimes I would publish them publicly. The
things I wrote were varied: thoughts, ideas, speeches, articles, reviews,
technology etc.</p>

<p>After I joined Microsoft I wasn&rsquo;t writing as much. I stopped doing public
speaking, so that dropped off completely. Thoughts and ideas were the first to
go. And for a while, I attempted to keep a technical blog (on my newly minted
<a href="http://blogs.msdn.com/b/cosmin/">MSDN</a> address), but that was also rather short lived. Slowly but surely,
the only things I would write were Facebook posts, and even those were mostly
check-ins and photos.</p>

<p>The excuses are many, and none unique: time, laziness, complacency. Carry a
notepad with me; what am I, a savage? Pen and paper are for my parents, I keep
everything digitally. But obviously I&rsquo;m not carrying a laptop with me all the
time. And typing on the phone, while appropriate for text messages, is rather
inconvenient for anything longer or formatted. After all, nobody reads the
things I publish, and nobody really knows about the things I don&rsquo;t.</p>

<p>Somewhere along the way, I lost track of <strong>why</strong> I was writing in the first
place. It was to organize <em>my</em> thoughts. It was to improve <em>my</em> communication
skills. And it was for <em>me</em> to keep a history of things that I would otherwise
forget. It was never about getting other people&rsquo;s attention, and if a post I
wrote helped someone, great; but it was never a goal.</p>

<!-- more -->


<p>Luckily at Microsoft we used email. A lot. Too much actually, but that&rsquo;s for a
different time. Luckily, because it allowed me to continue fine-tuning my
communication skills. Most people who know me have realized at some point or
another that I choose my words very carefully, especially in written
communication. Being able to express yourself in a clear and concise manner is
non-trivial, and I&rsquo;ve witnessed many failures (my own included) on a daily
basis.</p>

<p>But other things started to fade away: I had to give a talk to a larger
audience once, and bombed completely. I wasn&rsquo;t really coming up with creative
thoughts anymore. And there were those small details I kept forgetting. Most
importantly though, I now realize an even bigger problem I was having: I wasn&rsquo;t
learning as much. I slowed down writing technical articles because the
technology I was using became very familiar to me, so I wasn&rsquo;t solving new
problems. Just like my writing was gone, so were my side projects, which in the
past were my outlet to working on things outside of work.</p>

<p>So I decided I need to fix this. A few months ago I got myself a nice
<a href="http://shop.moleskine.com/en-us/notebooks-journals/evernote/evernote-smart-notebook-pocket-ruled-hard-cover-black-6807">notebook</a> and a <a href="http://www.zebrapen.com/product/f-701-ball-point-retractable-2/">pen</a> I would enjoy writing with, and I keep them with
me almost at all times. I started sketching out thoughts, ideas and making
lists. Next, I started spending less time doing useless things (like watching
TV) and instead working on some side projects and learning new things. Since
work was all on the Microsoft stack, I decided my projects have to be
non-Microsoft. So I started learning <a href="http://golang.org">Go</a>, reading more papers and tech
articles and building libraries and small systems.</p>

<p>The last part is resuming writing a blog, which is where this post comes in.
Even as I had time last month in-between jobs, it was the one thing on my todo
list I kept procrastinating. So I&rsquo;ll apply the same strategy that I apply with
some of my other work I tend to procrastinate: make some public commitment
which forces me to actually do the work, even if subconsciously I know that
it&rsquo;s not really critical.</p>

<p>Over the next few weeks I&rsquo;ll write about my recent experiences with changing
jobs, the upcoming move from Seattle to San Francisco, new challenges I&rsquo;ll
discover in my new job, as well as stuff on the non-technical front. I don&rsquo;t
want to set a fixed cadence because I know that won&rsquo;t work. But writing these
words down and publishing them to the world, even if nobody reads them (and
chances are, few will), will make me write posts. Which will help <em>me</em>. And if
they help anyone else, well that&rsquo;s just the cherry on top.</p>
]]></content>
  </entry>
  
</feed>
