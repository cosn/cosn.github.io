<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[All your writing are belong to us]]></title>
  <link href="http://www.cosminn.net/atom.xml" rel="self"/>
  <link href="http://www.cosminn.net/"/>
  <updated>2014-10-05T10:17:53-07:00</updated>
  <id>http://www.cosminn.net/</id>
  <author>
    <name><![CDATA[Cosmin Nicolaescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Year of New Restaurants]]></title>
    <link href="http://www.cosminn.net/blog/2014/10/04/a-year-of-new-restaurants/"/>
    <updated>2014-10-04T22:07:18-07:00</updated>
    <id>http://www.cosminn.net/blog/2014/10/04/a-year-of-new-restaurants</id>
    <content type="html"><![CDATA[<p>Seattle is a city full of terrific restaurants with amazing food. And after living
there for four years, I&rsquo;m pretty happy that I probably ate at ~80% of them. But
that means that there&rsquo;s still probably over a dozen places that are really tasty
which I didn&rsquo;t try out. Even in my last few weeks living there, I was finding
little gems, in the form of lunch trucks around the city or small places in
Pike&rsquo;s Place. Given that SF has at least an order of magnitude more restaurants,
and the average quality is higher due to the inherent competition, a new
strategy was needed.</p>

<!-- more -->


<h3>The paradox</h3>

<p>The reality is that, in cities like San Francisco or Seattle, most restaurants
serve good food. A high number of them have exceptional food. And a few
special have something you can&rsquo;t find anywhere else (like <a href="http://www.paseoseattle.com/">Paseo</a> and
<a href="http://www.salumicuredmeats.com/">Salumi</a>). And this is where the paradox comes in: once you have a set of
good restaurants, you&rsquo;re guaranteed to have a tasty meal. But by going to the
same places, you&rsquo;re missing out on discovering another delicious
restaurant, at the risk of being slightly disappointed occasionally.</p>

<h3>The plot</h3>

<p>Since I suffer from the &ldquo;once you find something good, stick to it&rdquo; syndrome, I
needed to create something which breaks the usual pattern. So, over the course
of the summer I&rsquo;ve been planning a little adventure for San Francisco:
<strong>over the course of a year, I will not go to the same restaurant twice</strong>. This
will act as a forcing function to try out a new place of similar (or
completely new) cuisine.</p>

<h3>The exceptions</h3>

<p>Like anything with rules, there are exceptions. The list below exists not to
allow me to game the game I set up for myself, but to set expectations for
scenarios I <em>know</em> could result in a check-in to the same place.</p>

<ul>
<li>Work lunch places &mdash; there&rsquo;s only a few around one&rsquo;s work
place, and when I go it&rsquo;s typically in a group.</li>
<li>Takeout/Delivery places &mdash; similarly, there&rsquo;s only a few around one&rsquo;s home,
and it&rsquo;s convenient to be able to get some dinner late at night.</li>
<li>Brunch vs. Dinner &mdash; the same restaurant can be repeated if one of the meals
is a brunch and another is dinner. The menus are typically entirely
different, so it&rsquo;s really like trying out two different restaurants.</li>
<li>Out of town visitors &mdash; hopefully friends from Seattle or other parts of the
world will come to SF. When they do, I want to be able to take them to the
best places.</li>
<li>Group events &mdash; if someone wants to have their birthday at a restaurant I
already ate at, it would be pretty awkward to try to convince them to go
somewhere else because of my silly rules; and it would be a shame to not be
able to join them.</li>
</ul>


<h3>The details</h3>

<p>So, between October 1st, 2014 &ndash; October 1st, 2015:</p>

<ul>
<li>you should not see two check-ins at the same restaurant.</li>
<li>when checking in, each restaurant will get one of the following ratings:
<em>Sucks I can&rsquo;t try it out for another year</em>; <em>Meh, probably not coming back
for a year anyways</em> or <em>It&rsquo;s going to be much longer than a year
until I come back here</em>.</li>
<li>Exceptional places may end up with a blog entry along with some pictures (and
if you&rsquo;re curious about some place, just ping for more details).</li>
</ul>


<p>There&rsquo;s quite a few people I mentioned this to, who don&rsquo;t think I can pull it
through. And given my habits in Seattle, I do agree it&rsquo;s going to require lots of
discipline. At the very least, it should make for some fun stories and hopefully
great food.</p>

<p>(obligatory <a href="https://twitter.com/hashtag/firstworldproblems">#firstworldproblems</a> reference)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Fears &amp; Experiences]]></title>
    <link href="http://www.cosminn.net/blog/2014/08/09/interview-fears-and-experiences/"/>
    <updated>2014-08-09T16:31:27-07:00</updated>
    <id>http://www.cosminn.net/blog/2014/08/09/interview-fears-and-experiences</id>
    <content type="html"><![CDATA[<p>Before these last few months, I couldn&rsquo;t really remember my last interview. I
remembered <em>some</em> of them, but not really in any order, so couldn&rsquo;t tell you
exactly the <em>last</em> one. The last &ldquo;burst&rdquo; of interviews I had was in college,
when I was applying for internships. Microsoft (the one I took) was among the
list, but I&rsquo;m pretty sure it wasn&rsquo;t the last one. During my time there, I
changed teams several times, but never had to interview.</p>

<!-- more -->


<p>So you can imagine how I was feeling when I realized that I have do something
moderately stressful, with high impact towards my career, and that I had not
practiced in years. Arguably my only saving grace was that I did perform many
interviews (read: interviewer), and while that&rsquo;s no substitute, I do feel it
helped because I was more comfortable in the interview room and interacting with
the interviewer.</p>

<h1>TODO</h1>

<p>So why am I writing this post? Primarily for future me. Assuming things go as
planned and I don&rsquo;t have to interview for a few years, I&rsquo;ll be back in a similar
step as a few months ago, so this will help me remember some of the details I&rsquo;d
normally write down. Secondarily for anyone else who has a fear of technical
interviews. And from what I&rsquo;ve read online (while trying to deal with my own
fears), there&rsquo;s quite a few people.</p>

<p>The details below cover the entire process: prep, communication, phone screens,
interviews and (hopefully) offers. Given how personal this experience is, YMMV,
so apply your own filters on top of mine.</p>

<h3>The resume</h3>

<h1>TODO</h1>

<p>(Gayle: <a href="http://www.amazon.com/Cracking-PM-Interview-Product-Technology/dp/0984782818/">http://www.amazon.com/Cracking-PM-Interview-Product-Technology/dp/0984782818/</a>)
I had a resume, and likely spent more time than I should on it. Even if we
narrow it down to technology roles and companies, it still varies quite a bit:
larger companies will require one, and depending on the funnel you&rsquo;re in (more
on that later), it may make a huge difference or be just a checkbox. Smaller
companies put less value on it, and some don&rsquo;t care about it at all.</p>

<p>But assuming you will have a resume, there are some very useful rules to follow:</p>

<ol>
<li>Your resume should not exceed one page. Period. It doesn&rsquo;t matter if you&rsquo;re
applying for an internship or you have 20 years of experience. Yes, I
understand that in the latter case you&rsquo;ve done a lot in your life, but
unfortunately most of it (especially in tech) is not relevant anymore. Having
a one-page resume shows that you care about other people&rsquo;s time, and more
importantly that you can synthesize your thoughts in a concise manner. As an
interviewer, I can easily distill the last few things you&rsquo;ve worked on and
focus during an interview. If you have several pages (and I&rsquo;ve seen
candidates with double-digit number of pages), do you really think anyone
will ask you about about that COM issue you spent months on back in the
mid-nineties? Unless the job you&rsquo;re applying for requires experience with COM
(and you&rsquo;re masochistic enough to enjoy that), it&rsquo;s irrelevant.</li>
<li>Don&rsquo;t cheat to get a page in. Fonts should be readable, and spacing should be
making the resume read easily. Again, the people reading it spend somewhere
between 10-30 seconds on it on average, so do your best to make sure what&rsquo;s
important stands out as effortlessly as possible.</li>
<li>Now that you&rsquo;re really forced to focus on what&rsquo;s valuable, eliminate obvious
things which aren&rsquo;t. For example, listing all the different parts of
Microsoft Office, or even listing Office experience at all, is anti-climactic
at best. My parents know how to use Office. And I&rsquo;m pretty sure you couldn&rsquo;t
go through college now-a-days without acquiring basic skills in Word, Excel
and PowerPoint. So save yourself a line there for something more useful. The
same goes for operating systems. Unless you&rsquo;re applying for a sys admin
position which requires experience with a particular flavor of Linux or BSD,
it doesn&rsquo;t matter. Almost everyone has used Windows, and almost everyone can
use a Mac pretty effortlessly. That&rsquo;s two lines. The same goes for text
editors and IDEs: companies hire you for your experience in a certain domain
<strong>and</strong> the ability to pick up small things along the way, like Visual
Studio. I&rsquo;ll stop at three lines, since you get the gist of it.</li>
<li>Now that you&rsquo;re on your way to a 1-page resume that contains actually useful
information, spend at most an hour a day for at most a week. This will allow
you to refactor your resume while not wasting too much time on it. The main
value of a resume is to get you in the door. Once you&rsquo;re there, it
asymptotically approaches zero as you&rsquo;re progressing through the interviews.
In other words, there&rsquo;s more valuable things you can spend your time on, even
if it means your resume could be 1% better next week.</li>
</ol>


<h3>Prep&#8217;ing</h3>

<p>Most industries will hire people primarily based on their experience and a
couple of hours of chatting about behavioral questions. Sadly, the tech industry
primarily relies on 30ish-minute challenges which tend to focus on problems you
haven&rsquo;t seen since your university days. Some companies do better than others at
this, but at the end of the day it&rsquo;s worthwhile to get a [book][1] or [two][2]
and go through the problems to get comfortable. At first, they seemed much more
difficult to me then they were. Then it got easier as I was getting into that
mindset. A few tricks that worked for me: you&rsquo;ll almost always have to use a
hash. Linked lists are likely the second most valuable data structure to apply,
and it will likely be doubly-linked. Trees are primarily useful for lower-level
things (like file system and database questions). They also make for good
&ldquo;warm-up&rdquo; problems where the interviewer can ask you to traverse a binary tree
non-recursively. Don&rsquo;t spend much time on any problem in the book whose solution
is larger than 1-1.5 pages: interviewers don&rsquo;t typically have entire walls of
whiteboards, and they don&rsquo;t expect you to wipe parts of it just to make space,
so you won&rsquo;t see them. I would recommend going through the solutions and
understanding them though since <em>parts</em> of many times those problems can be
broken down into smaller parts that can show up in an interview.</p>

<p>Timebox your studying. Otherwise you&rsquo;ll both spend too little and too much time
on it: too little each day to remember things, and too much in terms of the
number of weeks it will take you to finish a book. Somewhere between two weeks
and one month seems to be the sweet spot.</p>

<h3>Research</h3>

<p>Most people don&rsquo;t have a single company in mind they want to work on, and if
they do, it&rsquo;s probably because they don&rsquo;t know about other ones. Spend some time
to reflect on the kind of companies you&rsquo;d like to work on: the location, the
size and the specific areas they&rsquo;re in. Then find companies that match that
criteria. If you&rsquo;re looking at bigger companies (i.e. Microsoft, Google,
Amazon), the search is easier and primarily consists of [Glassdoor][3]. If
you&rsquo;re looking at smaller companies and start-ups, then [Crunchbase][4],
[AngeList][5] and [Hacker News][6] will be much more useful. Once you find the
companies which match your criteria, find a couple of companies that are
slightly off, they&rsquo;ll come in handy for your practice.</p>

<h3>The B-list</h3>

<p>Unless you&rsquo;re interviewing on a regular basis (which is also typically a bad
sign), you&rsquo;re rusty at it. Of course it&rsquo;s easier for everyone if you applied to
your dream company and got in and then you&rsquo;re done, but chances are it&rsquo;s not
going to happen. There&rsquo;s a much higher probability that you&rsquo;ll make some silly
mistakes and bomb your first few interviews, so instead use them on companies
you don&rsquo;t really plan on working at. The companies on this &ldquo;B-list&rdquo; should still
be tangentially related to your &ldquo;A-list&rdquo;, just that if you don&rsquo;t get an offer it
won&rsquo;t hurt your feelings. Choose two or three of these and do more if you still
need it afterwards. Try to schedule them all within one/two weeks so you&rsquo;re not
wasting your time on it and getting through as quickly as possible.</p>

<h3>Applying</h3>

<p>All companies have a /jobs or /careers page. Use it to find the jobs you&rsquo;re
interested in, but try to find other ways to apply for them. As you can imagine,
those pages tend to put you in a pile of candidates and there&rsquo;s less of a chance
of being noticed. Instead, try to find a more personal avenue to get in: if
looking at larger companies, go to one of the numerous events they host and try
to meet some of the employees. If it&rsquo;s a smaller company, be more active in
their community and reach out to employees which are part of those communities
(i.e. Twitter, IRC, discussion lists). If you don&rsquo;t have any of those options,
then go ahead and submit a general jobs application: if the company is good,
typically their recruiting department is also good, and you&rsquo;ll be in good hands.
If their recruiting department is less good, it&rsquo;s likely the first of many
problems you&rsquo;re seeing with the company.</p>

<p>Cold emails can sometimes help as well, assuming they&rsquo;re done properly and with
the right audience. For example, I applied to some small start-ups with whom I
had no contact before, and I did so by email their CEO or CTO. Some of them got
back to me, others simply forwarded my email to their recruiter (which is still
better than the general queue of applicants), and others I never heard from. I
wouldn&rsquo;t recommend this approach with a company larger in size for obvious
reasons.</p>

<h3>The phone chat</h3>

<p>An engineer&rsquo;s time is pretty expensive, and companies typically create a funnel
to prevent wasting their time as much as possible. In most of my experiences I
got to talk to some non-technical person first. They likely work in recruiting
or HR, and aren&rsquo;t there to necessarily probe you on technical skills. They&rsquo;re
there to make sure there&rsquo;s a good match with what they&rsquo;re looking for based on
your interests and past experience. They are also the people who will schedule
the rest of your interviews, and they also have the ability to stop your
interview at that point.</p>

<p>Because there&rsquo;s not really much to study for this, schedule them pretty early
on. It will not only help get the actual interviews scheduled (they take time),
but will also help answer questions about the company which may not be readily
available. In my case, there were a few companies that got cut from my list
after chatting with the recruiters because I realized they wouldn&rsquo;t be a good
match.</p>

<h3>The phone interview</h3>

<p>After talking to a recruiter, you&rsquo;ll typically have at least one if not two
phone screens. If you&rsquo;re a local candidate (i.e. the only cost for the company
is their engineers&#8217; time) you&rsquo;ll probably have just one. If you&rsquo;re applying to a
US company but live in another city, you may get away with one phone screen if
you do well. International candidates will likely have two phone screens due to
the higher cost and bigger process.</p>

<p>Most companies will have use two methods of communication during an interview: a
phone and some collaborative editor. A few used Skype or Google Hangouts and
then I enabled screen sharing. If given a choice, I&rsquo;d recommend Skype/Hangouts
option since it allows you to use your favorite editor or IDE.</p>

<p>The problems asked are typically a level or two easier than an in-person
interview. The primary purpose of a phone screen is to weed out obviously poor
candidates. Interviewers want to make sure you can write some code and have
basic problem solving skills. Communication is also important here, especially
since you&rsquo;re not in the same room as the other person.</p>

<p>Many times there&rsquo;s a few days delay between the phone screen and the next time
you&rsquo;re contacted. Don&rsquo;t freak out, and the best way to deal with this is to ask
the phone screener at the end when you should expect to hear back from them. All
good companies will reach out to the candidates regardless of result.</p>

<h3>The interview day</h3>

<p>You&rsquo;ve been dreading this day since the moment you decided to apply, yet you
knew it was inevitable. Your day will consist of 3-7 interviews depending on the
company, all likely involving something technical (an exception could be the
last one). The majority of them will ask you to write actual code either on a
whiteboard or laptop, and a few of them will ask you to design some system.</p>

<p>There shouldn&rsquo;t be many surprises here. You&rsquo;ll likely not see any of the
problems you practiced since interviewers also know about them. If you do, it&rsquo;s
much better to tell them upfront that you&rsquo;ve seen a problem rather than try to
fake it. Best case scenario, you just earned honesty points, and the interviewer
will either still ask you to go through it or give you another problem, while
being more willing to help you out because he appreciated the honesty. Worst
case you pretend to not know the problem while it&rsquo;s obvious that you do, and the
interviewer gives you another problem, while being less willing to help you out
because you lied to them.</p>

<p>Talk. Before you write a line of code. Preferably before you even design stuff
in too much detail. Most of the time there&rsquo;s other information you need to come
to a reasonable solution that matches what the interviewer expects. And you&rsquo;ll
likely get stuck along the way because it&rsquo;s a new problem and there&rsquo;s a lot of
pressure. By talking to the interviewer you&rsquo;re helping him help you. If a
candidate simply stares at a whiteboard, there&rsquo;s very little information one can
extract to help them out. On the other hand, if you talk about what specifically
you&rsquo;re thinking of and what options you&rsquo;re considering, the interviewer may
decide to jump in and help as necessary.</p>

<p>Take your time. Don&rsquo;t take too much time, but be pragmatic about it. Write clean
code and is readable, leave appropriate amounts of space for things you likely
forgot to add, and be methodical about it. Solving a problem in a chaotic
fashion is almost the same as not solving it. Ultimately interviewers aren&rsquo;t
looking for you to just get a problem; they&rsquo;re looking whether you have the
right skills to solve a problem. At the end of the day, you&rsquo;re (hopefully) not
solving known problems in your job, so the journey is much more valuable than
the result this time.</p>

<h3>The wait</h3>

<p>If you thought that the phone screen delay was long&hellip; the delay between your
last interview and the decision tends to be much longer. It&rsquo;s not just a yes/no
decision. If it&rsquo;s a yes, then details factor in, primarily the details of your
offer. Depending on the company, those details can decided by one person who was
in your interview loop, or may have to go through multiple people, each of whom
take time. A similar strategy to the phone screen applies here for not freaking
out: ask the last interviewer what the next steps are and their timeframe. If
they don&rsquo;t know (many times engineers don&rsquo;t know HRish details), just send the
recruiter you were in contact with an email <strong>that same day</strong> thanking them for
the experience and time, and asking what the timeframe for the next steps are.</p>

<h3>The offer</h3>

<p>Congratulations, you got an offer! Hopefully it was from one of the A-list
companies and not just the practice rounds. Depending on how you&rsquo;ve timed your
interviews, all your offers may come in about the same time or have a bigger
delay. It&rsquo;s reasonable to expect at least a week to respond, and responding
doesn&rsquo;t necessarily mean accepting/declining. Like anything else in life,
there&rsquo;s typically room for negotiation. If you like the offer you got and are
pleased with all the terms, then you don&rsquo;t <em>have</em> to negotiate.</p>

<p>Like any other negotiation, it&rsquo;s about leverage. If you only have one offer and
hate your current job, there&rsquo;s little incentive for the company to offer you
ore, especially if the offer was fair.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Week of Stripes]]></title>
    <link href="http://www.cosminn.net/blog/2014/07/13/a-week-of-stripes/"/>
    <updated>2014-07-13T15:57:15-07:00</updated>
    <id>http://www.cosminn.net/blog/2014/07/13/a-week-of-stripes</id>
    <content type="html"><![CDATA[<p>This week was my first week at <a href="https://www.stripe.com">Stripe</a>, and so far it&rsquo;s been a thrilling
experience, even though my mind is still coping with the overload of
information it&rsquo;s been subjected to. The people have been extremely friendly and
welcoming. The office is both great and in a great location. The food is tasty
and the beer selection is spectacular.</p>

<p>I wanted to outline some of the details of my on-boarding process, and compare
it to my previous on-boarding at Microsoft. Also, as someone who&rsquo;s been using
various enterprise technologies from Microsoft, I was very curious to see what
the equivalents are in a small company, so this post will outline many of them.</p>

<!-- more -->


<h3>Pre-start</h3>

<p>Upon accepting my offer, I was sent a welcome email in which all of the company
was CC&#8217;ed. While a very small thing, receiving tens of welcome emails from
people in the company makes you feel happy about your choice.</p>

<p>Next up, a few weeks before starting (assuming there is such a period) you get
another email in which you get to choose your email address and office setup,
including your laptop (with whatever customizations you&rsquo;d like!).  This means
that on your first day you&rsquo;ve got your ideal environment available.  I think
this is valuable not only from a productivity perspective, but also morale. At
least for us engineers, not having the hardware you want can be annoying at the
very least.</p>

<p>This is one of the first contrasting aspects from Microsoft. When you join
Microsoft, you also have your computer available, but it&rsquo;s not one that you
chose or customized. I can see why having a custom computer for each of the
130,000 employees can have massive operational overhead, but I also believe
Microsoft is moving too much in the &ldquo;one way&rdquo; side by institutionalizing the
same hardware regardless of job or discipline. An engineer has very different
needs from someone in sales. Even within engineering, someone focusing on
client development has different needs from someone building web services.
Empower your people to make the right choices for themselves and they&rsquo;ll be
better, more productive employees.</p>

<p>Another difference worth mentioning is what&rsquo;s on the machine. At Stripe, my
laptop had my account already created, my SSH keys configured, the VPN set up
and the major repositories available. At Microsoft the first thing I did was
re-image the box with the IT image, followed by endless hours of setting up the
team-specific software (after figuring out all the permissions &mdash; more on that
below).</p>

<h3>First day</h3>

<p>Upon going through an office tour and meeting some people, your assigned
spin-up buddy (another employee who helps you out while you&rsquo;re ramping up) goes
over some of the common tools used inside the company. After lunch, you get
your development environment set up by publishing your <a href="https://www.stripe.com/about#cos">photo</a> on the Stripe
public website. While a rather trivial process, it acts as a forcing function
to get your repositories up-to-date, begin familiarizing yourself with the
structure of the code, and push a change through the pipeline just like you
would anything else moving forward. I can&rsquo;t emphasize enough how <strong>huge</strong> this
is! I don&rsquo;t remember exactly when my first check-in went through at Microsoft
after starting, but I&rsquo;m 92% sure it wasn&rsquo;t in my first week.</p>

<p>This is where some of the agility and modern tools start being noticed. Going
through that exercise was possible because I had <em>access</em> to everything. For
the things that weren&rsquo;t already set up for me, my spin-up buddy would give me
access, which was instantaneous. One of the biggest complaints I heard from
Microsoft new hires was that, after figuring out what permissions you need,
there&rsquo;s a 1-3 day waiting period for replication to take place. This
practically means that for your first few days, you really can&rsquo;t be very
productive, no matter how much you try.</p>

<h3>Tools</h3>

<p>Most of the things above covered process, but more fascinating for me were the
tools used. Before joining, I was rather confident that Microsoft has done a
good job at building enterprise products, and the fact that so many companies
use them is a testament to their success. Moreover, it seemed nearly impossible
for Microsoft to lose its leader position. After this week, I&rsquo;m less convinced
 of the latter.</p>

<h4>Email &amp;&amp; Calendar</h4>

<p>At Stripe we use Google Apps, which means every employee gets their email,
calendar and <strong>directory</strong> through Google. You want to schedule a meeting, no
problem; there&rsquo;s even support for rooms, and of course it includes free/busy
information. All the mailing lists come through Google Apps as well, and
there&rsquo;s a nice page where you can see all of them and subscribe to the ones you
need. Granted, this works because we&rsquo;re a small company and don&rsquo;t have tens of
thousands of mailing lists, but there&rsquo;s nothing preventing that from happening.
More importantly, access is <em>immediate</em>. There are no replication delays, or
approvals. Filters are trivial to create.</p>

<p>But what I was <em>most</em> happy about is that they&rsquo;ve solved the &ldquo;nested lists&rdquo;
problem. I can&rsquo;t recall how many times I got an email at Microsoft because I
was a member of some group that eventually got nested through many layers to
some other group, but I had no clue what that initial list was. GMail actually
tells you for every email which mailing list resulted in you getting an email.
It even does that if the list is BCC&#8217;ed! Why Exchange hasn&rsquo;t implemented this
after all these years is beyond me.</p>

<h4>Notes</h4>

<p>OneNote is one of my favorite products from Microsoft. It was available on
multiple platforms when the rest of Office was not, and it makes note-taking
orders of magnitude better. At Microsoft I would say that information is
communicated in one of three formats: email (60%), websites (20%) and OneNote
(20%). It wasn&rsquo;t until a few years back that <em>some</em> people started keeping
meeting notes in OneNote. But the problem is that there are <em>many</em> OneNotes.
Each feature team typically has their own, and they&rsquo;re typically not stored in
a place that&rsquo;s easy to find.</p>

<p>Stripe uses <a href="https://hackpad.com/">Hackpad</a>, which while not as feature-rich as OneNote, does
one thing really well: it keeps <em>all</em> notes from <em>any</em> employee in <strong>one</strong>
place. Through Hackpad I&rsquo;ve been able to read how-tos and wikis, as well as
notes sent by the co-founders or other people to the company and have
historical value.</p>

<h4>Chat</h4>

<p>Basic Instant Messaging isn&rsquo;t a new problem, and it&rsquo;s been mainly solved since
the late 90s. In addition to IM, Microsoft Lync also had desktop sharing which
was very useful, and conferencing was relatively seamless. There were two
problems I had with Lync: it was primarily focused on one-to-one interactions.
Yes, you could have group chats, but that was a small minority of how people
spent their time on Lync. Second, and more importantly, it was pretty ephemeral.
Conversation history was available for the participants but, that was about it.
Microsoft never embraced an IRC-like communication channel, and I think there&rsquo;s
some very practical cases for that.</p>

<p>Stripe uses <a href="https://slack.com/">Slack</a> and they&rsquo;ve solved all three problems: they enable
direct messaging within an organization. They have channels which people can
subscribe to and discuss various topics. And everything said there is persisted
and searchable.</p>

<h4>Source Control</h4>

<p>GitHub. &lsquo;nuff said.</p>

<p>It&rsquo;s not necessarily <em>where</em> you host your code that makes a huge difference
(although I personally think it&rsquo;s pretty hard to beat GitHub). But having a
modern, distributed source control technology is invaluable. At Microsoft we
spent endless hours debating between Source Depot (an internal technology) and
Team Foundation Service (Microsoft&rsquo;s source control product launched a few
years back). Both were losing choices. Yes, they each had some advantages and
disadvantages, but they were <em>relative to each other</em>. When compared to Git or
Mercurial, there were zero advantages.</p>

<p>Luckily Microsoft is moving in the right direction: TFS has added support for
Git, and teams are starting to move to that, but adoption will take some time
when you&rsquo;re dealing with so many teams and large codebase(s).</p>

<p>A few notes on source control-related topics: code reviews are primarily done
via pull requests. Checkins aren&rsquo;t gated since people use feature branches for
almost any change, and there is a continuous integration system in place via
<a href="https://www.solanolabs.com/">Tddium</a> which will run all tests with any commit. This is somewhat similar
to SNAP or TFS gating, however it has the advantage of being much more scalable
since it can test things in parallel and not become a bottleneck.</p>

<h4>Logging in</h4>

<p>Everything inside Microsoft relied on Active Directory. Any website or tool
used those credentials for authentication and authorization. One you logged in,
you generally never had to type your password ever again. This was by far the
aspect I was most curious about.</p>

<p>My laptop has a local account, and SSH keys are used to authenticate whenever
connecting to another server. So far, I think this is a better experience than
Microsoft&rsquo;s because I don&rsquo;t have to worry about credentials in different
environments, and instead everything is managed through my public key.</p>

<p>Many of the tools have support for Google Account, and in those cases you go
through a simple OAuth flow initially, after which you never have to log in
again. There are, however, some tools that have their own authentication, and
for those you end up creating new accounts.</p>

<p>So overall, it&rsquo;s not 100% centralized, but through OAuth flows it&rsquo;s nearly there.</p>

<h3>Closing thoughts</h3>

<p>I realized as I was writing this post that the tone can be construed as
somewhat negative towards Microsoft. It&rsquo;s really not meant to be, but I do have
to admit I was surprised at how well a non-Microsoft stack can function
inside a company, even in areas where I believed Microsoft was the standard.
Many of these benefits are due to the use of much more modern tools. There&rsquo;s
typically no software to install and everything is available via a web
interface. The data is all stored in the cloud. The products were built
with scale in mind: there are no delays, and replication is something internal
rather than visible to customers.</p>

<p>These are all contributing factors, and mostly valid ones. But at the end of
the day, employee productivity is what matters the most. If a particular
process or tool doesn&rsquo;t maximize productivity, fix it or replace it. Change
inside Microsoft is underway. It&rsquo;s just a matter of how long it will take until
it reaches the whole company. The sad part is that its competitors not only
aren&rsquo;t spending efforts migrating and re-educating, but that they&rsquo;ve been
living in that &ldquo;modern world&rdquo; for a few years.</p>

<p>Now time to get back to learning some new stuff&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resume (as in Continue)]]></title>
    <link href="http://www.cosminn.net/blog/2014/07/07/resume-as-in-continue/"/>
    <updated>2014-07-07T15:01:01-07:00</updated>
    <id>http://www.cosminn.net/blog/2014/07/07/resume-as-in-continue</id>
    <content type="html"><![CDATA[<p>Back in high school and college I used to write. Sometimes quite a lot.
Sometimes only for myself and sometimes I would publish them publicly. The
things I wrote were varied: thoughts, ideas, speeches, articles, reviews,
technology etc.</p>

<p>After I joined Microsoft I wasn&rsquo;t writing as much. I stopped doing public
speaking, so that dropped off completely. Thoughts and ideas were the first to
go. And for a while, I attempted to keep a technical blog (on my newly minted
<a href="http://blogs.msdn.com/b/cosmin/">MSDN</a> address), but that was also rather short lived. Slowly but surely,
the only things I would write were Facebook posts, and even those were mostly
check-ins and photos.</p>

<p>The excuses are many, and none unique: time, laziness, complacency. Carry a
notepad with me; what am I, a savage? Pen and paper are for my parents, I keep
everything digitally. But obviously I&rsquo;m not carrying a laptop with me all the
time. And typing on the phone, while appropriate for text messages, is rather
inconvenient for anything longer or formatted. After all, nobody reads the
things I publish, and nobody really knows about the things I don&rsquo;t.</p>

<p>Somewhere along the way, I lost track of <strong>why</strong> I was writing in the first
place. It was to organize <em>my</em> thoughts. It was to improve <em>my</em> communication
skills. And it was for <em>me</em> to keep a history of things that I would otherwise
forget. It was never about getting other people&rsquo;s attention, and if a post I
wrote helped someone, great; but it was never a goal.</p>

<!-- more -->


<p>Luckily at Microsoft we used email. A lot. Too much actually, but that&rsquo;s for a
different time. Luckily, because it allowed me to continue fine-tuning my
communication skills. Most people who know me have realized at some point or
another that I choose my words very carefully, especially in written
communication. Being able to express yourself in a clear and concise manner is
non-trivial, and I&rsquo;ve witnessed many failures (my own included) on a daily
basis.</p>

<p>But other things started to fade away: I had to give a talk to a larger
audience once, and bombed completely. I wasn&rsquo;t really coming up with creative
thoughts anymore. And there were those small details I kept forgetting. Most
importantly though, I now realize an even bigger problem I was having: I wasn&rsquo;t
learning as much. I slowed down writing technical articles because the
technology I was using became very familiar to me, so I wasn&rsquo;t solving new
problems. Just like my writing was gone, so were my side projects, which in the
past were my outlet to working on things outside of work.</p>

<p>So I decided I need to fix this. A few months ago I got myself a nice
<a href="http://shop.moleskine.com/en-us/notebooks-journals/evernote/evernote-smart-notebook-pocket-ruled-hard-cover-black-6807">notebook</a> and a <a href="http://www.zebrapen.com/product/f-701-ball-point-retractable-2/">pen</a> I would enjoy writing with, and I keep them with
me almost at all times. I started sketching out thoughts, ideas and making
lists. Next, I started spending less time doing useless things (like watching
TV) and instead working on some side projects and learning new things. Since
work was all on the Microsoft stack, I decided my projects have to be
non-Microsoft. So I started learning <a href="http://golang.org">Go</a>, reading more papers and tech
articles and building libraries and small systems.</p>

<p>The last part is resuming writing a blog, which is where this post comes in.
Even as I had time last month in-between jobs, it was the one thing on my todo
list I kept procrastinating. So I&rsquo;ll apply the same strategy that I apply with
some of my other work I tend to procrastinate: make some public commitment
which forces me to actually do the work, even if subconsciously I know that
it&rsquo;s not really critical.</p>

<p>Over the next few weeks I&rsquo;ll write about my recent experiences with changing
jobs, the upcoming move from Seattle to San Francisco, new challenges I&rsquo;ll
discover in my new job, as well as stuff on the non-technical front. I don&rsquo;t
want to set a fixed cadence because I know that won&rsquo;t work. But writing these
words down and publishing them to the world, even if nobody reads them (and
chances are, few will), will make me write posts. Which will help <em>me</em>. And if
they help anyone else, well that&rsquo;s just the cherry on top.</p>
]]></content>
  </entry>
  
</feed>
